// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     purchase.avsc
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Purchase struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *DescriptionUnion `json:"description"`

	ProductSku string `json:"productSku"`

	PurchaseTs string `json:"purchaseTs"`
}

const PurchaseAvroCRC64Fingerprint = "\x05\x0e\x13ÄºB&x"

func NewPurchase() *Purchase {
	return &Purchase{}
}

func DeserializePurchase(r io.Reader) (*Purchase, error) {
	t := NewPurchase()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializePurchaseFromSchema(r io.Reader, schema string) (*Purchase, error) {
	t := NewPurchase()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writePurchase(r *Purchase, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeDescriptionUnion(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ProductSku, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.PurchaseTs, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Purchase) Serialize(w io.Writer) error {
	return writePurchase(r, w)
}

func (r *Purchase) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"productSku\",\"type\":\"string\"},{\"name\":\"purchaseTs\",\"type\":\"string\"}],\"name\":\"purchase\",\"type\":\"record\"}"
}

func (r *Purchase) SchemaName() string {
	return "purchase"
}

func (_ *Purchase) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Purchase) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Purchase) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Purchase) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Purchase) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Purchase) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Purchase) SetString(v string)   { panic("Unsupported operation") }
func (_ *Purchase) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Purchase) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Id}
	case 1:
		return &types.String{Target: &r.Name}
	case 2:
		r.Description = NewDescriptionUnion()

		return r.Description
	case 3:
		return &types.String{Target: &r.ProductSku}
	case 4:
		return &types.String{Target: &r.PurchaseTs}
	}
	panic("Unknown field index")
}

func (r *Purchase) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Purchase) NullField(i int) {
	switch i {
	case 2:
		r.Description = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *Purchase) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Purchase) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Purchase) Finalize()                        {}

func (_ *Purchase) AvroCRC64Fingerprint() []byte {
	return []byte(PurchaseAvroCRC64Fingerprint)
}
